/* REFACTOR OF PROJECT 6 FOR USART6, AND USING UART TO USB CONVERTER!
 * Port C - PC6 / PC7 / PC8 [AF8]
 */

#include "stm32f7xx.h"

#define GPIO_C_EN				(1U<<2)
#define	UART6_TX				(1U<<6) // Uncertain
#define GPIO_ALTERNATE_MODE		0x2
#define USART6_EN				(1U<<5)
#define UART_DATAWIDTH_8B		0x00000000U
#define UART_PARITY_NONE		0x00000000U
#define UART_STOPBITS_1			0x00000000U

void set_ahb1_periph_clock(uint32_t periphs);
void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode);
void set_apb2_periph_clock(uint32_t periphs);
void uart_parameters_config (USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits);
uint16_t compute_uart_div(uint32_t PeriphClock, uint32_t BaudRate);
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t BaudRate);
void uart_enable(USART_TypeDef *USARTx);
void uart_write (USART_TypeDef *USARTx, uint8_t value);
void uart6_tx_init();
void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection);

int main (void)
{
	int x;
	uart6_tx_init();

	while (1)
	{
		uart_write(USART6, 'B');

		for (int i = 0; i < 9000; i++)
		{
			x++;
		}
	}
}

void uart_write (USART_TypeDef *USARTx, uint8_t value)
{
	/* 1. Wait until transmit data register is empty */
	while(!(USARTx->ISR & USART_ISR_TXE)) {}

	/* 2. Write value into TX data register */
	USARTx->TDR = value;
}

void uart6_tx_init(void)
{
	/* 1. Enable clock access to GPIOC */
	set_ahb1_periph_clock(GPIO_C_EN);

	/* 2. Set [PC6] to alternate function */
	set_pin_mode(GPIOC, UART6_TX, GPIO_ALTERNATE_MODE);

	/* 3. Set alternate function type to USART */
	GPIOC->AFR[0] &= ~(1U<<24);
	GPIOC->AFR[0] &= ~(1U<<25);
	GPIOC->AFR[0] &= ~(1U<<26);
	GPIOC->AFR[0] |= (1U<<27);

	/* 4. Enable clock access to the USART6 module */
	set_apb2_periph_clock(USART6_EN);

	/* 5. Configure USART parameters */
	uart_parameters_config (USART6, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	set_uart_transfer_direction(USART6, USART_CR1_TE);

	/* 6. Set Baud Rate */
	uart_set_baudrate(USART6, 16000000, 115200);

	/* 7. Enable USART */
	uart_enable(USART6);
}

/* Enable clock access to AHB1 */
void set_ahb1_periph_clock(uint32_t periphs)
{
	SET_BIT(RCC->AHB1ENR, periphs);
}

/* Enable clock access to AHB2 */
void set_ahb2_periph_clock(uint32_t periphs)
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

/* Enable clock access to APB1 */
void set_apb1_periph_clock(uint32_t periphs)
{
	SET_BIT(RCC->APB1ENR, periphs);
}

/* Enable clock access to APB2 */
void set_apb2_periph_clock(uint32_t periphs)
	{
		SET_BIT(RCC->APB2ENR, periphs);
	}

/* Set Port Mode */
void set_pin_mode(	GPIO_TypeDef *GPIOx,
					uint32_t Pin,
					uint32_t Mode)
{
	// Clear the relevant bits & set new bits

	MODIFY_REG(	GPIOx->MODER,
				(0x3 << POSITION_VAL(Pin) * 2U),
				(Mode << POSITION_VAL(Pin) * 2U)
			  );
}

/* Sets UART Parameters */
void uart_parameters_config (	USART_TypeDef *USARTx,
								uint32_t DataWidth,
								uint32_t Parity,
								uint32_t StopBits )
{

	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
}

/* Calculates proper frequency based on system clock */
uint16_t compute_uart_div(uint32_t PeriphClock, uint32_t BaudRate)
{
	return (PeriphClock + (BaudRate / 2U) ) / BaudRate;
}

/* Sets UART Baud Rate */
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_div(PeriphClock, BaudRate);
}

/* Enable the UART Module */
void uart_enable(USART_TypeDef *USARTx)
{
	SET_BIT(USARTx->CR1, USART_CR1_UE);
}

/* Set UART Transfer Direction */
void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
}





