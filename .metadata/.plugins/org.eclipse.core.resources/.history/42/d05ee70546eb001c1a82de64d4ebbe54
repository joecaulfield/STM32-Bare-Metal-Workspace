
15_TimerInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e12  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f6  00000000  00000000  0001122a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000115e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000108b  00000000  00000000  00011668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011b0  00000000  00000000  000126f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009edad  00000000  00000000  000138a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b2650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000194  00000000  00000000  000b26a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003c8 	.word	0x080003c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003c8 	.word	0x080003c8

08000208 <user_leds_init>:
#include "led.h"
#include "stm32f7xx.h"

void user_leds_init(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOI_CLK_EN;
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <user_leds_init+0x28>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <user_leds_init+0x28>)
 8000212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOI->MODER |= USER_LED1_MODER;
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <user_leds_init+0x2c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a05      	ldr	r2, [pc, #20]	; (8000234 <user_leds_init+0x2c>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40022000 	.word	0x40022000

08000238 <all_leds_toggle>:
{
	GPIOI->ODR &=~ USER_LED1;
}

void all_leds_toggle(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	GPIOI->ODR ^= USER_LED1;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <all_leds_toggle+0x1c>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <all_leds_toggle+0x1c>)
 8000242:	f083 0302 	eor.w	r3, r3, #2
 8000246:	6153      	str	r3, [r2, #20]
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40022000 	.word	0x40022000

08000258 <main>:
#include "exti.h"

static void tim1_update_callback(void);

int main (void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	//uart6_tx_init();

	user_leds_init();
 800025c:	f7ff ffd4 	bl	8000208 <user_leds_init>
	tim1_1hz_interrupt_init();
 8000260:	f000 f838 	bl	80002d4 <tim1_1hz_interrupt_init>

	while(1)
 8000264:	e7fe      	b.n	8000264 <main+0xc>

08000266 <tim1_update_callback>:
	}

}

static void tim1_update_callback(void)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	af00      	add	r7, sp, #0
	/* Do Something */
	all_leds_toggle();
 800026a:	f7ff ffe5 	bl	8000238 <all_leds_toggle>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	/* Check whether update interrupt is pending */
	if ((TIM1->SR * SR_UIF) !=0)
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d007      	beq.n	8000290 <TIM1_UP_TIM10_IRQHandler+0x1c>
	{
		/* Clear the update interrupt flag */
		TIM1->SR &=~ SR_UIF;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000286:	f023 0301 	bic.w	r3, r3, #1
 800028a:	6113      	str	r3, [r2, #16]

		/* Do something */
		tim1_update_callback();
 800028c:	f7ff ffeb 	bl	8000266 <tim1_update_callback>

	}
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010000 	.word	0x40010000

08000298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db0b      	blt.n	80002c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4907      	ldr	r1, [pc, #28]	; (80002d0 <__NVIC_EnableIRQ+0x38>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <tim1_1hz_interrupt_init>:
	TIM1->CR1 |= CR1_CEN;

}

void tim1_1hz_interrupt_init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	/* Enable Clock Access to TIM1 */
	RCC->APB2ENR |= TIM1EN;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <tim1_1hz_interrupt_init+0x50>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <tim1_1hz_interrupt_init+0x50>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

	/* Set the Prescaler */
	TIM1->PSC = 1600 - 1; // 16,000,000 / 1600 = 10,000
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 80002e6:	f240 623f 	movw	r2, #1599	; 0x63f
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28

	/* Set the Auto-Reload Value */
	TIM1->ARR = 10000 - 1; // 10,000 / 10,000 = 1Hz
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 80002ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Enable TIM1 Update Interrupt */
	TIM1->DIER |= DIER_UIF;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	60d3      	str	r3, [r2, #12]

	/* Enable TIM1 Update Interrupt in NVIC */
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000300:	2019      	movs	r0, #25
 8000302:	f7ff ffc9 	bl	8000298 <__NVIC_EnableIRQ>

	/* Enable Timer */
	TIM1->CR1 |= CR1_CEN;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6013      	str	r3, [r2, #0]

	/* Force Update Generation */
	TIM1->EGR |= EGR_UG;
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <tim1_1hz_interrupt_init+0x54>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40023800 	.word	0x40023800
 8000328:	40010000 	.word	0x40010000

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff7b 	bl	8000258 <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	; (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	; (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	; (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	; (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
