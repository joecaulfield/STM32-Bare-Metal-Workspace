
6b_uart_tx2_USART6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000350  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000520  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000520  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000739  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e1  00000000  00000000  00010c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00010f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b679  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006c4  00000000  00000000  0002c621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a811  00000000  00000000  0002cce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c74f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  000c7548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000500 	.word	0x08000500

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000500 	.word	0x08000500

08000208 <main>:
void uart_write (USART_TypeDef *USARTx, uint8_t value);
void uart6_tx_init();
void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection);

int main (void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	int x;
	uart6_tx_init();
 800020e:	f000 f82b 	bl	8000268 <uart6_tx_init>

	while (1)
	{
		uart_write(USART6, 'B');
 8000212:	2142      	movs	r1, #66	; 0x42
 8000214:	4808      	ldr	r0, [pc, #32]	; (8000238 <main+0x30>)
 8000216:	f000 f811 	bl	800023c <uart_write>

		for (int i = 0; i < 9000; i++)
 800021a:	2300      	movs	r3, #0
 800021c:	603b      	str	r3, [r7, #0]
 800021e:	e005      	b.n	800022c <main+0x24>
		{
			x++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 9000; i++)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	f242 3227 	movw	r2, #8999	; 0x2327
 8000232:	4293      	cmp	r3, r2
 8000234:	ddf4      	ble.n	8000220 <main+0x18>
		uart_write(USART6, 'B');
 8000236:	e7ec      	b.n	8000212 <main+0xa>
 8000238:	40011400 	.word	0x40011400

0800023c <uart_write>:
		}
	}
}

void uart_write (USART_TypeDef *USARTx, uint8_t value)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
	/* 1. Wait until transmit data register is empty */
	while(!(USARTx->ISR & USART_ISR_TXE)) {}
 8000248:	bf00      	nop
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <uart_write+0xe>

	/* 2. Write value into TX data register */
	USARTx->TDR = value;
 8000256:	78fa      	ldrb	r2, [r7, #3]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <uart6_tx_init>:

void uart6_tx_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	/* 1. Enable clock access to GPIOC */
	set_ahb1_periph_clock(GPIO_C_EN);
 800026c:	2004      	movs	r0, #4
 800026e:	f000 f83b 	bl	80002e8 <set_ahb1_periph_clock>

	/* 2. Set [PC6] to alternate function */
	set_pin_mode(GPIOC, UART6_TX, GPIO_ALTERNATE_MODE);
 8000272:	2202      	movs	r2, #2
 8000274:	2140      	movs	r1, #64	; 0x40
 8000276:	4819      	ldr	r0, [pc, #100]	; (80002dc <uart6_tx_init+0x74>)
 8000278:	f000 f85a 	bl	8000330 <set_pin_mode>

	/* 3. Set alternate function type to USART */
	GPIOC->AFR[0] &= ~(1U<<24);
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <uart6_tx_init+0x74>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a16      	ldr	r2, [pc, #88]	; (80002dc <uart6_tx_init+0x74>)
 8000282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000286:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &= ~(1U<<25);
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <uart6_tx_init+0x74>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <uart6_tx_init+0x74>)
 800028e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000292:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &= ~(1U<<26);
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <uart6_tx_init+0x74>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <uart6_tx_init+0x74>)
 800029a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800029e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (1U<<27);
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <uart6_tx_init+0x74>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <uart6_tx_init+0x74>)
 80002a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002aa:	6213      	str	r3, [r2, #32]

	/* 4. Enable clock access to the USART6 module */
	set_apb2_periph_clock(USART6_EN);
 80002ac:	2020      	movs	r0, #32
 80002ae:	f000 f82d 	bl	800030c <set_apb2_periph_clock>

	/* 5. Configure USART parameters */
	uart_parameters_config (USART6, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80002b2:	2300      	movs	r3, #0
 80002b4:	2200      	movs	r2, #0
 80002b6:	2100      	movs	r1, #0
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <uart6_tx_init+0x78>)
 80002ba:	f000 f869 	bl	8000390 <uart_parameters_config>
	set_uart_transfer_direction(USART6, USART_CR1_TE);
 80002be:	2108      	movs	r1, #8
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <uart6_tx_init+0x78>)
 80002c2:	f000 f8bc 	bl	800043e <set_uart_transfer_direction>

	/* 6. Set Baud Rate */
	uart_set_baudrate(USART6, 16000000, 115200);
 80002c6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002ca:	4906      	ldr	r1, [pc, #24]	; (80002e4 <uart6_tx_init+0x7c>)
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <uart6_tx_init+0x78>)
 80002ce:	f000 f894 	bl	80003fa <uart_set_baudrate>

	/* 7. Enable USART */
	uart_enable(USART6);
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <uart6_tx_init+0x78>)
 80002d4:	f000 f8a3 	bl	800041e <uart_enable>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40020800 	.word	0x40020800
 80002e0:	40011400 	.word	0x40011400
 80002e4:	00f42400 	.word	0x00f42400

080002e8 <set_ahb1_periph_clock>:

/* Enable clock access to AHB1 */
void set_ahb1_periph_clock(uint32_t periphs)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <set_ahb1_periph_clock+0x20>)
 80002f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <set_ahb1_periph_clock+0x20>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	630b      	str	r3, [r1, #48]	; 0x30
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800

0800030c <set_apb2_periph_clock>:
	SET_BIT(RCC->APB1ENR, periphs);
}

/* Enable clock access to APB2 */
void set_apb2_periph_clock(uint32_t periphs)
	{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB2ENR, periphs);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <set_apb2_periph_clock+0x20>)
 8000316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000318:	4904      	ldr	r1, [pc, #16]	; (800032c <set_apb2_periph_clock+0x20>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4313      	orrs	r3, r2
 800031e:	644b      	str	r3, [r1, #68]	; 0x44
	}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40023800 	.word	0x40023800

08000330 <set_pin_mode>:

/* Set Port Mode */
void set_pin_mode(	GPIO_TypeDef *GPIOx,
					uint32_t Pin,
					uint32_t Mode)
{
 8000330:	b480      	push	{r7}
 8000332:	b089      	sub	sp, #36	; 0x24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	// Clear the relevant bits & set new bits

	MODIFY_REG(	GPIOx->MODER,
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	fa92 f2a2 	rbit	r2, r2
 800034a:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800034c:	693a      	ldr	r2, [r7, #16]
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	b2d2      	uxtb	r2, r2
 8000354:	0052      	lsls	r2, r2, #1
 8000356:	2103      	movs	r1, #3
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	43d2      	mvns	r2, r2
 800035e:	401a      	ands	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	fa93 f3a3 	rbit	r3, r3
 800036a:	61bb      	str	r3, [r7, #24]
  return result;
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	fab3 f383 	clz	r3, r3
 8000372:	b2db      	uxtb	r3, r3
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	fa01 f303 	lsl.w	r3, r1, r3
 800037c:	431a      	orrs	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	601a      	str	r2, [r3, #0]
				(0x3 << POSITION_VAL(Pin) * 2U),
				(Mode << POSITION_VAL(Pin) * 2U)
			  );
}
 8000382:	bf00      	nop
 8000384:	3724      	adds	r7, #36	; 0x24
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
	...

08000390 <uart_parameters_config>:
/* Sets UART Parameters */
void uart_parameters_config (	USART_TypeDef *USARTx,
								uint32_t DataWidth,
								uint32_t Parity,
								uint32_t StopBits )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	603b      	str	r3, [r7, #0]

	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <uart_parameters_config+0x40>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	431a      	orrs	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	605a      	str	r2, [r3, #4]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	efffe9ff 	.word	0xefffe9ff

080003d4 <compute_uart_div>:

/* Calculates proper frequency based on system clock */
uint16_t compute_uart_div(uint32_t PeriphClock, uint32_t BaudRate)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	return (PeriphClock + (BaudRate / 2U) ) / BaudRate;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	085a      	lsrs	r2, r3, #1
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	441a      	add	r2, r3
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ec:	b29b      	uxth	r3, r3
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <uart_set_baudrate>:

/* Sets UART Baud Rate */
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t BaudRate)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b084      	sub	sp, #16
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClock, BaudRate);
 8000406:	6879      	ldr	r1, [r7, #4]
 8000408:	68b8      	ldr	r0, [r7, #8]
 800040a:	f7ff ffe3 	bl	80003d4 <compute_uart_div>
 800040e:	4603      	mov	r3, r0
 8000410:	461a      	mov	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	60da      	str	r2, [r3, #12]
}
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <uart_enable>:

/* Enable the UART Module */
void uart_enable(USART_TypeDef *USARTx)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f043 0201 	orr.w	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <set_uart_transfer_direction>:

/* Set UART Transfer Direction */
void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f023 020c 	bic.w	r2, r3, #12
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	431a      	orrs	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff feb7 	bl	8000208 <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a8:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b0:	2000001c 	.word	0x2000001c

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4d0d      	ldr	r5, [pc, #52]	; (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	; (80004f4 <__libc_init_array+0x3c>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2600      	movs	r6, #0
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4d0b      	ldr	r5, [pc, #44]	; (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	; (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 f818 	bl	8000500 <_init>
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2600      	movs	r6, #0
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
