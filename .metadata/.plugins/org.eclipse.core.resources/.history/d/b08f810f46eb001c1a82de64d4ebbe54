
18_uart_tx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000584  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000584  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010584  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012b1  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e1  00000000  00000000  00011865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00011fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7c6  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001cc8  00000000  00000000  0002e876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef64  00000000  00000000  0003053e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf4a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d0  00000000  00000000  000cf4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000564 	.word	0x08000564

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000564 	.word	0x08000564

08000208 <set_pin_mode>:
#include "gpio.h"

/* Set Port Mode */
void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000208:	b480      	push	{r7}
 800020a:	b089      	sub	sp, #36	; 0x24
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	// Clear the relevant bits & set new bits

	MODIFY_REG(	GPIOx->MODER,
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800021c:	697a      	ldr	r2, [r7, #20]
 800021e:	fa92 f2a2 	rbit	r2, r2
 8000222:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000224:	693a      	ldr	r2, [r7, #16]
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b2d2      	uxtb	r2, r2
 800022c:	0052      	lsls	r2, r2, #1
 800022e:	2103      	movs	r1, #3
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	43d2      	mvns	r2, r2
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	fa93 f3a3 	rbit	r3, r3
 8000242:	61bb      	str	r3, [r7, #24]
  return result;
 8000244:	69bb      	ldr	r3, [r7, #24]
 8000246:	fab3 f383 	clz	r3, r3
 800024a:	b2db      	uxtb	r3, r3
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	431a      	orrs	r2, r3
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	601a      	str	r2, [r3, #0]
				(0x3 << POSITION_VAL(Pin) * 2U),
				(Mode << POSITION_VAL(Pin) * 2U)
			  );
}
 800025a:	bf00      	nop
 800025c:	3724      	adds	r7, #36	; 0x24
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <user_leds_init>:
#include "led.h"
#include "stm32f7xx.h"

void user_leds_init(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOI_CLK_EN;
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <user_leds_init+0x28>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <user_leds_init+0x28>)
 8000272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000276:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOI->MODER |= USER_LED1_MODER;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <user_leds_init+0x2c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a05      	ldr	r2, [pc, #20]	; (8000294 <user_leds_init+0x2c>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40022000 	.word	0x40022000

08000298 <main>:
static void USART_callback(void);

char ch;

int main (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	user_leds_init();
 800029c:	f7ff ffe4 	bl	8000268 <user_leds_init>
	uart6_tx_interrupt_init();
 80002a0:	f000 f85e 	bl	8000360 <uart6_tx_interrupt_init>

	while (1)
 80002a4:	e7fe      	b.n	80002a4 <main+0xc>
	...

080002a8 <USART_callback>:

	}
}

static void USART_callback(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	/* Write value into transmit data register */
	USART6->TDR = 'A';
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <USART_callback+0x14>)
 80002ae:	2241      	movs	r2, #65	; 0x41
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40011400 	.word	0x40011400

080002c0 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	/* Check if TXE Interrupt Occurred */
	if ((USART6->ISR & ISR_TXE) == ISR_TXE)
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <USART6_IRQHandler+0x18>)
 80002c6:	69db      	ldr	r3, [r3, #28]
 80002c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002cc:	2b80      	cmp	r3, #128	; 0x80
 80002ce:	d101      	bne.n	80002d4 <USART6_IRQHandler+0x14>
	{
		/* Do Something */
		USART_callback();
 80002d0:	f7ff ffea 	bl	80002a8 <USART_callback>
	}
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40011400 	.word	0x40011400

080002dc <set_ahb1_periph_clock>:
#include "rcc.h"


/* Enable clock access to AHB1 */
void set_ahb1_periph_clock(uint32_t periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <set_ahb1_periph_clock+0x20>)
 80002e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002e8:	4904      	ldr	r1, [pc, #16]	; (80002fc <set_ahb1_periph_clock+0x20>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	630b      	str	r3, [r1, #48]	; 0x30
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40023800 	.word	0x40023800

08000300 <set_apb2_periph_clock>:
	SET_BIT(RCC->APB1ENR, periphs);
}

/* Enable clock access to APB2 */
void set_apb2_periph_clock(uint32_t periphs)
	{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB2ENR, periphs);
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <set_apb2_periph_clock+0x20>)
 800030a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800030c:	4904      	ldr	r1, [pc, #16]	; (8000320 <set_apb2_periph_clock+0x20>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4313      	orrs	r3, r2
 8000312:	644b      	str	r3, [r1, #68]	; 0x44
	}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40023800 	.word	0x40023800

08000324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	2b00      	cmp	r3, #0
 8000334:	db0b      	blt.n	800034e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f003 021f 	and.w	r2, r3, #31
 800033c:	4907      	ldr	r1, [pc, #28]	; (800035c <__NVIC_EnableIRQ+0x38>)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	095b      	lsrs	r3, r3, #5
 8000344:	2001      	movs	r0, #1
 8000346:	fa00 f202 	lsl.w	r2, r0, r2
 800034a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000e100 	.word	0xe000e100

08000360 <uart6_tx_interrupt_init>:
	/* 7. Enable USART */
	uart_enable(USART6);
}

void uart6_tx_interrupt_init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	/* 1. Enable clock access to GPIOC */
	set_ahb1_periph_clock(GPIO_C_EN);
 8000364:	2004      	movs	r0, #4
 8000366:	f7ff ffb9 	bl	80002dc <set_ahb1_periph_clock>

	/* 2. Set [PC6] to alternate function */
	set_pin_mode(GPIOC, UART6_TX, GPIO_ALTERNATE_MODE);
 800036a:	2202      	movs	r2, #2
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	481e      	ldr	r0, [pc, #120]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 8000370:	f7ff ff4a 	bl	8000208 <set_pin_mode>

	/* 3. Set alternate function type to USART */
	GPIOC->AFR[0] &= ~(1U<<24);
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 800037a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800037e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &= ~(1U<<25);
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 8000386:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800038a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &= ~(1U<<26);
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 8000392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000396:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (1U<<27);
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <uart6_tx_interrupt_init+0x88>)
 800039e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003a2:	6213      	str	r3, [r2, #32]

	/* 4. Enable clock access to the USART6 module */
	set_apb2_periph_clock(USART6_EN);
 80003a4:	2020      	movs	r0, #32
 80003a6:	f7ff ffab 	bl	8000300 <set_apb2_periph_clock>

	/* 5. Configure USART parameters */
	uart_parameters_config (USART6, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80003aa:	2300      	movs	r3, #0
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	480e      	ldr	r0, [pc, #56]	; (80003ec <uart6_tx_interrupt_init+0x8c>)
 80003b2:	f000 f81f 	bl	80003f4 <uart_parameters_config>
	set_uart_transfer_direction(USART6, USART_CR1_TE);
 80003b6:	2108      	movs	r1, #8
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <uart6_tx_interrupt_init+0x8c>)
 80003ba:	f000 f872 	bl	80004a2 <set_uart_transfer_direction>

	/* 6. Set Baud Rate */
	uart_set_baudrate(USART6, 16000000, 115200);
 80003be:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c2:	490b      	ldr	r1, [pc, #44]	; (80003f0 <uart6_tx_interrupt_init+0x90>)
 80003c4:	4809      	ldr	r0, [pc, #36]	; (80003ec <uart6_tx_interrupt_init+0x8c>)
 80003c6:	f000 f84a 	bl	800045e <uart_set_baudrate>

	/* 7. Enable USART */
	uart_enable(USART6);
 80003ca:	4808      	ldr	r0, [pc, #32]	; (80003ec <uart6_tx_interrupt_init+0x8c>)
 80003cc:	f000 f859 	bl	8000482 <uart_enable>

	/* Enable USART TXE Interrupt */
	USART6->CR1 |= CR1_TXEIE;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <uart6_tx_interrupt_init+0x8c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a05      	ldr	r2, [pc, #20]	; (80003ec <uart6_tx_interrupt_init+0x8c>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	6013      	str	r3, [r2, #0]

	/* Enable USART Interrupt in NVIC */
	NVIC_EnableIRQ(USART6_IRQn);
 80003dc:	2047      	movs	r0, #71	; 0x47
 80003de:	f7ff ffa1 	bl	8000324 <__NVIC_EnableIRQ>

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40020800 	.word	0x40020800
 80003ec:	40011400 	.word	0x40011400
 80003f0:	00f42400 	.word	0x00f42400

080003f4 <uart_parameters_config>:
/* Sets UART Parameters */
static void uart_parameters_config (	USART_TypeDef *USARTx,
								uint32_t DataWidth,
								uint32_t Parity,
								uint32_t StopBits )
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
 8000400:	603b      	str	r3, [r7, #0]

	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <uart_parameters_config+0x40>)
 8000408:	4013      	ands	r3, r2
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	68ba      	ldr	r2, [r7, #8]
 800040e:	430a      	orrs	r2, r1
 8000410:	431a      	orrs	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	431a      	orrs	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	efffe9ff 	.word	0xefffe9ff

08000438 <compute_uart_div>:

/* Calculates proper frequency based on system clock */
uint16_t compute_uart_div(uint32_t PeriphClock, uint32_t BaudRate)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	return (PeriphClock + (BaudRate / 2U) ) / BaudRate;
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	085a      	lsrs	r2, r3, #1
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	441a      	add	r2, r3
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000450:	b29b      	uxth	r3, r3
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <uart_set_baudrate>:

/* Sets UART Baud Rate */
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t BaudRate)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClock, BaudRate);
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	68b8      	ldr	r0, [r7, #8]
 800046e:	f7ff ffe3 	bl	8000438 <compute_uart_div>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	60da      	str	r2, [r3, #12]
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <uart_enable>:

/* Enable the UART Module */
static void uart_enable(USART_TypeDef *USARTx)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f043 0201 	orr.w	r2, r3, #1
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <set_uart_transfer_direction>:

/* Set UART Transfer Direction */
static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f023 020c 	bic.w	r2, r3, #12
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <LoopForever+0xe>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <LoopForever+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f6:	f000 f811 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fa:	f7ff fecd 	bl	8000298 <main>

080004fe <LoopForever>:

LoopForever:
    b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   r0, =_estack
 8000500:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800050c:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 8000510:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000514:	2000001c 	.word	0x2000001c

08000518 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC_IRQHandler>
	...

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4d0d      	ldr	r5, [pc, #52]	; (8000554 <__libc_init_array+0x38>)
 8000520:	4c0d      	ldr	r4, [pc, #52]	; (8000558 <__libc_init_array+0x3c>)
 8000522:	1b64      	subs	r4, r4, r5
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	2600      	movs	r6, #0
 8000528:	42a6      	cmp	r6, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	4d0b      	ldr	r5, [pc, #44]	; (800055c <__libc_init_array+0x40>)
 800052e:	4c0c      	ldr	r4, [pc, #48]	; (8000560 <__libc_init_array+0x44>)
 8000530:	f000 f818 	bl	8000564 <_init>
 8000534:	1b64      	subs	r4, r4, r5
 8000536:	10a4      	asrs	r4, r4, #2
 8000538:	2600      	movs	r6, #0
 800053a:	42a6      	cmp	r6, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f855 3b04 	ldr.w	r3, [r5], #4
 8000544:	4798      	blx	r3
 8000546:	3601      	adds	r6, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f855 3b04 	ldr.w	r3, [r5], #4
 800054e:	4798      	blx	r3
 8000550:	3601      	adds	r6, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
