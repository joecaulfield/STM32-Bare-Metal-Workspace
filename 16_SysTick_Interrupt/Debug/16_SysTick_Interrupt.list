
16_SysTick_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800040c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a1b  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000347  00000000  00000000  00010e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  000111a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6f3  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016a5  00000000  00000000  0002da0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8ae  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd95e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c8  00000000  00000000  000cd9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003ec 	.word	0x080003ec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003ec 	.word	0x080003ec

08000208 <pf9_adc3_init>:
#define CR2_AD_ON		(1U<<0)
#define CR2_SWSTART		(1U<<30)
#define SR_EOC			(1U<<1)

void pf9_adc3_init(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/***** Configure ADC GPIO Pin *****/

	/***** Enable Clock Access to GPIO F *****/
	// GPIO F is connected to AHB1 Bus
	// F is Pin 5 in the AHB1ENR
	RCC->AHB1ENR |= GPIO_F_EN;
 800020c:	4b21      	ldr	r3, [pc, #132]	; (8000294 <pf9_adc3_init+0x8c>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a20      	ldr	r2, [pc, #128]	; (8000294 <pf9_adc3_init+0x8c>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6313      	str	r3, [r2, #48]	; 0x30


	/***** Set PF9 as analog mode *****/
	// Moder for Pin 9 = 18, 19
	// Analog Mode = 0x11
	GPIOF->MODER |= (1U<<19);
 8000218:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <pf9_adc3_init+0x90>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <pf9_adc3_init+0x90>)
 800021e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000222:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (1U<<18);
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <pf9_adc3_init+0x90>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <pf9_adc3_init+0x90>)
 800022a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800022e:	6013      	str	r3, [r2, #0]

	/***** Configure ADC Module *****/
	// Enable Clock Access to ADC3
	// ADC3 is connected to the APB2 Bus
	// APB2ENR Pin 10 = ADC3 Enable
	RCC->APB2ENR |= ADC3_EN;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <pf9_adc3_init+0x8c>)
 8000232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <pf9_adc3_init+0x8c>)
 8000236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023a:	6453      	str	r3, [r2, #68]	; 0x44

	/***** Set Conversion-Mode to Continuous *****/
	// If Bit 1 (CONT) is set to 1, Continuous is Enabled
	ADC3->CR2 |= CR2_CONT;
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <pf9_adc3_init+0x94>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a16      	ldr	r2, [pc, #88]	; (800029c <pf9_adc3_init+0x94>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	6093      	str	r3, [r2, #8]

	/***** Set sequencer length to 1 *****/
	// L occupies bits 20, 21, 22, 23
	ADC3->SQR1 = SEQ_LENGTH_1;
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <pf9_adc3_init+0x94>)
 800024a:	2200      	movs	r2, #0
 800024c:	62da      	str	r2, [r3, #44]	; 0x2c

	/***** Set ADC Channel *****/
	// Setting ADC3's Channel 7 (0x111)
	// as First Priority (SQ1) in the SQR3 Register
	ADC3->SQR3 |= (1U<<2);
 800024e:	4b13      	ldr	r3, [pc, #76]	; (800029c <pf9_adc3_init+0x94>)
 8000250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000252:	4a12      	ldr	r2, [pc, #72]	; (800029c <pf9_adc3_init+0x94>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (1U<<1);
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <pf9_adc3_init+0x94>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800025e:	4a0f      	ldr	r2, [pc, #60]	; (800029c <pf9_adc3_init+0x94>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (1U<<0);
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <pf9_adc3_init+0x94>)
 8000268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <pf9_adc3_init+0x94>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6353      	str	r3, [r2, #52]	; 0x34

	/***** Enable ADC Module *****/
	ADC3->CR2 |= CR2_AD_ON;
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <pf9_adc3_init+0x94>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <pf9_adc3_init+0x94>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6093      	str	r3, [r2, #8]

	/***** Begin Conversion *****/
	ADC3->CR2 |= CR2_SWSTART;
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <pf9_adc3_init+0x94>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a06      	ldr	r2, [pc, #24]	; (800029c <pf9_adc3_init+0x94>)
 8000284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000288:	6093      	str	r3, [r2, #8]
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	40023800 	.word	0x40023800
 8000298:	40021400 	.word	0x40021400
 800029c:	40012200 	.word	0x40012200

080002a0 <user_leds_init>:
#include "led.h"
#include "stm32f7xx.h"

void user_leds_init(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOI_CLK_EN;
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <user_leds_init+0x28>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <user_leds_init+0x28>)
 80002aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOI->MODER |= USER_LED1_MODER;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <user_leds_init+0x2c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <user_leds_init+0x2c>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40022000 	.word	0x40022000

080002d0 <all_leds_toggle>:
{
	GPIOI->ODR &=~ USER_LED1;
}

void all_leds_toggle(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	GPIOI->ODR ^= USER_LED1;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <all_leds_toggle+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <all_leds_toggle+0x1c>)
 80002da:	f083 0302 	eor.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40022000 	.word	0x40022000

080002f0 <main>:

int sensor_value;
static void systick_callback(void);

int main (void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	pf9_adc3_init();
 80002f4:	f7ff ff88 	bl	8000208 <pf9_adc3_init>
	user_leds_init();
 80002f8:	f7ff ffd2 	bl	80002a0 <user_leds_init>
	systick_1Hz_interrupt();
 80002fc:	f000 f80e 	bl	800031c <systick_1Hz_interrupt>

	while(1)
 8000300:	e7fe      	b.n	8000300 <main+0x10>

08000302 <systick_callback>:

	}
}

static void systick_callback(void)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
	all_leds_toggle();
 8000306:	f7ff ffe3 	bl	80002d0 <all_leds_toggle>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}

0800030e <SysTick_Handler>:

void SysTick_Handler(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
	systick_callback();
 8000312:	f7ff fff6 	bl	8000302 <systick_callback>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <systick_1Hz_interrupt>:

	SysTick->CTRL = 0;
}

void systick_1Hz_interrupt(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	/* Reload the number of clocks per millisecond */
	SysTick->LOAD = ONE_SEC_LOAD - 1;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <systick_1Hz_interrupt+0x2c>)
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <systick_1Hz_interrupt+0x30>)
 8000324:	605a      	str	r2, [r3, #4]

	/* Clear the Current Value Register */
	SysTick->VAL = 0;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <systick_1Hz_interrupt+0x2c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]

	/* Select Clock Source and Enable SysTick */
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <systick_1Hz_interrupt+0x2c>)
 800032e:	2205      	movs	r2, #5
 8000330:	601a      	str	r2, [r3, #0]

	/* Enable Systick Interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <systick_1Hz_interrupt+0x2c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a04      	ldr	r2, [pc, #16]	; (8000348 <systick_1Hz_interrupt+0x2c>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e010 	.word	0xe000e010
 800034c:	00f423ff 	.word	0x00f423ff

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ffb5 	bl	80002f0 <main>

08000386 <LoopForever>:

LoopForever:
    b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	2000001c 	.word	0x2000001c

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
