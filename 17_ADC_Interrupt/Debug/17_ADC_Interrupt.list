
17_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  0800047c  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000474  08000474  0001047c  2**0
                  CONTENTS
  4 .ARM          00000000  08000474  08000474  0001047c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000474  0800047c  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800047c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800047c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001047c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e51  00000000  00000000  000104ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000345  00000000  00000000  000112fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00011648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c604  00000000  00000000  000117a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011eb  00000000  00000000  0002dda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ede5  00000000  00000000  0002ef8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdd74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b4  00000000  00000000  000cddc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800045c 	.word	0x0800045c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	0800045c 	.word	0x0800045c

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <pf9_adc3_interrupt_init>:

	// Read & Return results
}

void pf9_adc3_interrupt_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	/***** Configure ADC GPIO Pin *****/

	/***** Enable Clock Access to GPIO F *****/
	// GPIO F is connected to AHB1 Bus
	// F is Pin 5 in the AHB1ENR
	RCC->AHB1ENR |= GPIO_F_EN;
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <pf9_adc3_interrupt_init+0x98>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a23      	ldr	r2, [pc, #140]	; (80002dc <pf9_adc3_interrupt_init+0x98>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6313      	str	r3, [r2, #48]	; 0x30


	/***** Set PF9 as analog mode *****/
	// Moder for Pin 9 = 18, 19
	// Analog Mode = 0x11
	GPIOF->MODER |= (1U<<19);
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <pf9_adc3_interrupt_init+0x9c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <pf9_adc3_interrupt_init+0x9c>)
 800025a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (1U<<18);
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <pf9_adc3_interrupt_init+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <pf9_adc3_interrupt_init+0x9c>)
 8000266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800026a:	6013      	str	r3, [r2, #0]

	/***** Configure ADC Module *****/
	// Enable Clock Access to ADC3
	// ADC3 is connected to the APB2 Bus
	// APB2ENR Pin 10 = ADC3 Enable
	RCC->APB2ENR |= ADC3_EN;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <pf9_adc3_interrupt_init+0x98>)
 800026e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <pf9_adc3_interrupt_init+0x98>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000276:	6453      	str	r3, [r2, #68]	; 0x44

	/***** Set Conversion-Mode to Continuous *****/
	// If Bit 1 (CONT) is set to 1, Continuous is Enabled
	ADC3->CR2 |= CR2_CONT;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6093      	str	r3, [r2, #8]

	/***** Set sequencer length to 1 *****/
	// L occupies bits 20, 21, 22, 23
	ADC3->SQR1 = SEQ_LENGTH_1;
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c

	/***** Set ADC Channel *****/
	// Setting ADC3's Channel 7 (0x111)
	// as First Priority (SQ1) in the SQR3 Register
	ADC3->SQR3 |= (1U<<2);
 800028a:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 800028c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 8000290:	f043 0304 	orr.w	r3, r3, #4
 8000294:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (1U<<1);
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 8000298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800029a:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (1U<<0);
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6353      	str	r3, [r2, #52]	; 0x34

	/***** Enable ADC Module *****/
	ADC3->CR2 |= CR2_AD_ON;
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a0c      	ldr	r2, [pc, #48]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6093      	str	r3, [r2, #8]

	/***** Enable End-Of-Conversion Interrupt *****/
	ADC3->CR1 |= CR1_EOCIE;
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6053      	str	r3, [r2, #4]

	/***** Enable ADC Interrupt in NVIC *****/
	NVIC_EnableIRQ(ADC_IRQn);
 80002c6:	2012      	movs	r0, #18
 80002c8:	f7ff ff9e 	bl	8000208 <__NVIC_EnableIRQ>

	/***** Begin Conversion *****/
	ADC3->CR2 |= CR2_SWSTART;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <pf9_adc3_interrupt_init+0xa0>)
 80002d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002d6:	6093      	str	r3, [r2, #8]
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40021400 	.word	0x40021400
 80002e4:	40012200 	.word	0x40012200

080002e8 <user_leds_init>:
#include "led.h"
#include "stm32f7xx.h"

void user_leds_init(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOI_CLK_EN;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <user_leds_init+0x28>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <user_leds_init+0x28>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOI->MODER |= USER_LED1_MODER;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <user_leds_init+0x2c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a05      	ldr	r2, [pc, #20]	; (8000314 <user_leds_init+0x2c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40022000 	.word	0x40022000

08000318 <all_leds_on>:

void all_leds_on(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	GPIOI->ODR |= USER_LED1;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <all_leds_on+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <all_leds_on+0x1c>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6153      	str	r3, [r2, #20]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40022000 	.word	0x40022000

08000338 <all_leds_off>:

void all_leds_off(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	GPIOI->ODR &=~ USER_LED1;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <all_leds_off+0x1c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <all_leds_off+0x1c>)
 8000342:	f023 0302 	bic.w	r3, r3, #2
 8000346:	6153      	str	r3, [r2, #20]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40022000 	.word	0x40022000

08000358 <main>:
#include "adc.h"

int sensor_value;

int main (void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	user_leds_init();
 800035c:	f7ff ffc4 	bl	80002e8 <user_leds_init>
	pf9_adc3_interrupt_init();
 8000360:	f7ff ff70 	bl	8000244 <pf9_adc3_interrupt_init>


	while(1)
 8000364:	e7fe      	b.n	8000364 <main+0xc>
	...

08000368 <adc_conversion_complete_callback>:
		//all_leds_on();
	}
}

static void adc_conversion_complete_callback()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	sensor_value = ADC3->DR;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <adc_conversion_complete_callback+0x28>)
 800036e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000370:	461a      	mov	r2, r3
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <adc_conversion_complete_callback+0x2c>)
 8000374:	601a      	str	r2, [r3, #0]

	if (sensor_value > 1024)
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <adc_conversion_complete_callback+0x2c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037e:	dd02      	ble.n	8000386 <adc_conversion_complete_callback+0x1e>
		all_leds_on();
 8000380:	f7ff ffca 	bl	8000318 <all_leds_on>
	else
		all_leds_off();
}
 8000384:	e001      	b.n	800038a <adc_conversion_complete_callback+0x22>
		all_leds_off();
 8000386:	f7ff ffd7 	bl	8000338 <all_leds_off>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40012200 	.word	0x40012200
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	/* Check if End-of-Conversion Interrupt occurred */
	if ((ADC3->SR & SR_EOC) == SR_EOC)
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <ADC_IRQHandler+0x24>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f003 0302 	and.w	r3, r3, #2
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d107      	bne.n	80003b8 <ADC_IRQHandler+0x20>
	{
		/* Clear EOC Flag */
		ADC3->SR &=~ SR_EOC;
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <ADC_IRQHandler+0x24>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <ADC_IRQHandler+0x24>)
 80003ae:	f023 0302 	bic.w	r3, r3, #2
 80003b2:	6013      	str	r3, [r2, #0]

		/* Do Something */
		adc_conversion_complete_callback();
 80003b4:	f7ff ffd8 	bl	8000368 <adc_conversion_complete_callback>
	}
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40012200 	.word	0x40012200

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 f811 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ffb1 	bl	8000358 <main>

080003f6 <LoopForever>:

LoopForever:
    b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000404:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 8000408:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800040c:	20000020 	.word	0x20000020

08000410 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <BusFault_Handler>
	...

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	; (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	; (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	; (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	; (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000474 	.word	0x08000474
 8000458:	08000478 	.word	0x08000478

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
